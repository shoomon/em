## Docker란?

Docker는 프로그램 실행에 필요한 **모든 구성요소**(코드, 라이브러리, 설정 등)를 하나의 **컨테이너**에 담아, 어느 환경에서나 동일하게 실행될 수 있도록 지원하는 기술입니다. 이를 통해 환경 간 차이로 인한 문제를 효과적으로 해결할 수 있습니다.

### Docker 컨테이너와 이미지

- **Docker 이미지**  
  프로그램 실행에 필요한 파일, 라이브러리, 설정 등이 포함된 읽기 전용 템플릿입니다. 이를 레시피와 요리 재료에 비유할 수 있습니다.

- **Docker 컨테이너**  
  이미지를 실제로 실행한 상태로, 애플리케이션이 동작하는 환경입니다. 요리 재료와 레시피로부터 완성된 요리에 해당한다고 볼 수 있습니다.

### Docker 사용 이유

- **환경 일관성 보장**  
  어떤 환경에서든 동일한 컨테이너를 실행할 수 있어 "내 컴퓨터에서는 되는데"라는 문제를 해결합니다.
- **배포 및 협업 효율성**  
  복잡한 설치나 설정 과정을 생략하고, 이미지를 바로 실행할 수 있어 배포 속도를 향상시킵니다.
- **자원 효율성**  
  가상머신보다 가볍고 빠르게 실행되어 시스템 자원을 효율적으로 사용할 수 있습니다.

### Docker 컨테이너 vs 가상머신(VM)

- **컨테이너**  
  운영체제 커널을 공유하며 필요한 프로그램과 라이브러리만 포함하여 가볍고 빠른 실행을 보장합니다. 주로 마이크로서비스 아키텍처에 적합합니다.
  
- **가상머신**  
  전체 운영체제와 하드웨어 자원을 가상화하여 독립적인 환경을 제공하므로 부팅 시간이 길고 자원 소모가 많습니다. 완벽한 격리가 필요할 때 유리합니다.

### DockerFile

DockerFile은 이미지를 빌드하기 위한 명세서입니다. 이미지 생성에 필요한 명령어들을 순차적으로 기술하며, 이를 기반으로 Docker 이미지를 생성합니다.

### Docker Compose

Docker Compose는 여러 컨테이너를 하나의 YAML 파일에서 관리할 수 있도록 도와주는 도구입니다. 이를 통해 개발 및 테스트 환경에서 여러 서비스를 일관되게 구성하고 관리할 수 있습니다.

### Docker Swarm vs Kubernetes

두 오케스트레이션 도구 모두 다수의 컨테이너를 클러스터 형태로 관리하지만 차이점이 있습니다.

- **Docker Swarm**  
  Docker에서 기본 제공하는 도구로, 설정이 간단하여 소규모 또는 중규모 환경에 적합합니다.
  
- **Kubernetes**  
  초기 설정과 학습 곡선은 높으나, 대규모 환경에서 높은 확장성과 안정성을 제공하며 다양한 기능과 활발한 커뮤니티 지원을 받습니다.

---

## CI/CD란?

CI/CD는 개발부터 배포까지의 자동화 방법론을 의미합니다.

- **CI (Continuous Integration, 지속적인 통합)**  
  개발자들이 작성한 코드를 주기적으로 통합하여 자동 테스트를 실행함으로써 문제를 조기에 발견하고 수정할 수 있도록 돕습니다.
  
- **CD (Continuous Deployment 또는 Continuous Delivery, 지속적인 배포)**  
  테스트를 통과한 코드를 자동으로 배포하여 빠르게 사용자에게 최신 서비스를 제공합니다.

> **추가**: CI/CD 도입 시 테스트 자동화, 롤백 전략, 모니터링 및 알림 시스템 구축 등의 고려사항이 중요합니다.

---

## 클라우드 컴퓨팅이란?

클라우드 컴퓨팅은 서버, 스토리지, 데이터베이스, 네트워크 등 다양한 IT 자원을 필요할 때마다 빌려 쓸 수 있는 서비스를 의미합니다. 이 방식은 자원의 확장과 축소가 유연하며, 사용한 만큼 비용을 지불하기 때문에 경제적입니다.

### SaaS (Software as a Service)

SaaS는 사용자가 소프트웨어를 직접 설치하지 않고 인터넷을 통해 바로 사용할 수 있는 서비스입니다. 예를 들어, Google Workspace나 Microsoft Office 365 등이 이에 해당합니다.

> **추가**: 클라우드 컴퓨팅은 IaaS(Infrastructure as a Service), PaaS(Platform as a Service) 등 다양한 서비스 모델을 포함합니다.

---

## 스케일 아웃 vs 스케일 업

- **스케일 아웃 (Scale-out)**  
  여러 대의 서버를 추가하여 성능과 안정성을 향상시키는 방식입니다. 장애 시 분산 처리를 통해 확장성을 확보할 수 있습니다.
  
- **스케일 업 (Scale-up)**  
  기존 서버의 하드웨어(메모리, CPU 등)를 업그레이드하여 성능을 향상시키는 방식입니다. 단일 시스템 관리가 용이하지만, 물리적 한계로 인해 확장성에 제한이 있을 수 있습니다.

---

## 추가: Docker 활용 사례 및 모범 사례

- **개발 환경 통일**  
  팀원 간 동일한 개발 환경 제공으로 환경 차이 문제를 해결할 수 있습니다.
- **마이크로서비스 아키텍처**  
  각 서비스를 독립적으로 배포 및 관리하여 시스템의 유연성을 확보할 수 있습니다.
- **CI/CD 파이프라인**  
  Docker 이미지를 기반으로 자동화된 빌드 및 배포 프로세스를 구축할 수 있습니다.

> **모범 사례**  
> - 이미지 버전 관리: 버전 태깅을 통해 안정적인 배포를 유지합니다.  
> - 보안 강화: 최소 권한 원칙 및 이미지 취약점 스캔 도구를 활용합니다.

---

## 추가: CI/CD 도입 시 고려사항

- **테스트 자동화**  
  단위, 통합, 시스템 테스트를 통해 소프트웨어 품질을 보증합니다.
- **롤백 전략**  
  배포 실패 시 신속하게 복구할 수 있도록 롤백 계획을 마련합니다.
- **모니터링 및 알림**  
  배포 후 시스템 상태를 지속적으로 모니터링하고, 문제 발생 시 즉각적인 알림 체계를 구축합니다.

---